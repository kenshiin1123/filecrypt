// old code


import crypto from "crypto";

const deriveKey = (password) => crypto.scryptSync(password, "custom-salt", 24);
// const algorithm = "aes-256-gcm";
const algorithm = "aes-192-cbc";

export const Encrypt_AES = (fileBuffer, password) => {
  const key = deriveKey(password);
  const iv = crypto.randomBytes(16); // Generate a new IV

  const cipher = crypto.createCipheriv(algorithm, key, iv);
  const encryptedBuffer = Buffer.concat([
    iv,
    cipher.update(fileBuffer),
    cipher.final(),
  ]);

  return encryptedBuffer; // Encrypted file as a buffer
};

export const Decrypt_AES = (encryptedBuffer, password) => {
  const key = crypto.scryptSync(password, "custom-salt", 24);

  if (encryptedBuffer.length < 16) {
    throw new Error("Invalid encrypted data: Too short to contain IV.");
  }

  // Extract IV (first 16 bytes) and encrypted content
  const iv = encryptedBuffer.slice(0, 16);
  const encryptedData = encryptedBuffer.slice(16);

  const decipher = crypto.createDecipheriv(algorithm, key, iv);

  try {
    const decryptedBuffer = Buffer.concat([
      decipher.update(encryptedData),
      decipher.final(),
    ]);
    return decryptedBuffer;
  } catch (error) {
    throw new Error("Decryption failed: Invalid password or corrupted file.");
  }
};
